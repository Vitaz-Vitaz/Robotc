#pragma config(Sensor, S1,     ,               sensorEV3_Color, modeEV3Color_Reflected_Raw)
#pragma config(Sensor, S2,     ,               sensorEV3_Color, modeEV3Color_Reflected_Raw)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float S1_calibr(){
	float est = SensorRaw[S1];
	float minColor = 477;
	float maxColor = 660;
	return (est - minColor)/(maxColor - minColor) * 100;
}

float S2_calibr(){
	float est = SensorRaw[S2];
	float minColor = 477;
	float maxColor = 660;
	return (est - minColor)/(maxColor - minColor) * 100;
}

void go_line(float power){
	float k = 0.7;
	float d = 7;
	float error = 0;
	float last_error = error;
	float l = S1_calibr();
	float r = S2_calibr();
	while(l < 90 || r < 90){
		l = S1_calibr();
		r = S2_calibr();
		error = l - r;
		displayBigTextLine(1, "%d", l);
		displayBigTextLine(1, "%d", r);
		float u = error * k + (error - last_error) * d;
		motor[motorB] = power + u;
		motor[motorC] = power - u;
		last_error = error;
	}
	

}

task main()
{

	go_line(60);
	float a = nMotorEncoder[motorB];
	while(nMotorEncoder[motorB] - a < 60){
		motor[motorB] = 50;
		motor[motorC] = 50;
	}
	go_line(60);


}
